# Part 4: Backend Core Implementation

This section contains the core FastAPI backend implementation, handling request processing, WebSocket connections, and business logic. The code is organized for clarity and maintainability.

## Main Application (app/main.py)
```python
from fastapi import FastAPI, WebSocket, HTTPException, BackgroundTasks
from fastapi.middleware.cors import CORSMiddleware
from contextlib import asynccontextmanager
import logging
import os
from datetime import datetime

from .routers import chat, conversations
from .core import settings
from .services import message_service, websocket_manager
from .database import initialize_db, close_db

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - [%(filename)s:%(lineno)d] - %(message)s',
    filename='chat_server.log'
)
logger = logging.getLogger(__name__)

# Lifecycle management
@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup
    await initialize_db()
    logger.info("Database initialized")
    
    yield
    
    # Shutdown
    await close_db()
    logger.info("Database connection closed")

# Initialize FastAPI app
app = FastAPI(
    title="Enhanced Chat Server",
    description="A secure server for having and saving conversations",
    version="1.0.0",
    lifespan=lifespan
)

# Configure CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.ALLOWED_ORIGINS,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Include routers
app.include_router(chat.router, prefix="/chat", tags=["chat"])
app.include_router(conversations.router, prefix="/conversations", tags=["conversations"])

# WebSocket connection manager
ws_manager = websocket_manager.ConnectionManager()

@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    await ws_manager.connect(websocket)
    try:
        while True:
            data = await websocket.receive_text()
            # Process WebSocket messages
            await message_service.handle_websocket_message(ws_manager, websocket, data)
    except Exception as e:
        logger.error(f"WebSocket error: {str(e)}")
    finally:
        await ws_manager.disconnect(websocket)

@app.get("/health")
async def health_check():
    """Health check endpoint"""
    return {
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "version": settings.VERSION
    }
```

## Settings Management (app/core/settings.py)
```python
from pydantic_settings import BaseSettings
from typing import List
import os

class Settings(BaseSettings):
    # API Configuration
    API_VERSION: str = "1.0.0"
    DEBUG: bool = False
    
    # Security
    SECRET_KEY: str = os.getenv("SECRET_KEY", "your-secret-key")
    ALGORITHM: str = "HS256"
    ACCESS_TOKEN_EXPIRE_MINUTES: int = 30
    
    # CORS
    ALLOWED_ORIGINS: List[str] = [
        "http://localhost:5173",
        "http://localhost:3000"
    ]
    
    # Database
    DATABASE_URL: str = os.getenv(
        "DATABASE_URL", 
        "sqlite:///./chat.db"
    )
    
    # Chat Settings
    MAX_MESSAGE_LENGTH: int = 1000
    MAX_HISTORY_SIZE: int = 100
    
    # File Storage
    STORAGE_PATH: str = "conversations"
    
    class Config:
        env_file = ".env"

settings = Settings()
```

## Message Service (app/services/message_service.py)
```python
import json
import logging
from datetime import datetime
from typing import Dict, Any

from ..models.message import Message
from ..database.repositories import message_repository
from .websocket_manager import ConnectionManager

logger = logging.getLogger(__name__)

class MessageService:
    async def process_message(self, content: str, role: str) -> Dict[str, Any]:
        """Process incoming messages and generate responses"""
        try:
            # Create message
            message = Message(
                content=content,
                role=role,
                timestamp=datetime.now().isoformat()
            )
            
            # Save to database
            saved_message = await message_repository.create(message)
            
            # Generate response (implement your chat logic here)
            response = await self._generate_response(content)
            
            return {
                "message": saved_message.dict(),
                "response": response
            }
        except Exception as e:
            logger.error(f"Error processing message: {str(e)}")
            raise

    async def _generate_response(self, content: str) -> str:
        """
        Generate response using your preferred AI service
        Implement your chat logic here
        """
        # Add your chat implementation
        return "Response from AI"

    async def handle_websocket_message(
        self,
        manager: ConnectionManager,
        websocket: WebSocket,
        data: str
    ):
        """Handle incoming WebSocket messages"""
        try:
            message_data = json.loads(data)
            processed = await self.process_message(
                content=message_data["content"],
                role="user"
            )
            
            # Broadcast message to all connected clients
            await manager.broadcast(json.dumps(processed))
            
        except json.JSONDecodeError:
            logger.error("Invalid JSON received")
            await websocket.send_text(
                json.dumps({"error": "Invalid message format"})
            )
        except Exception as e:
            logger.error(f"Error handling WebSocket message: {str(e)}")
            await websocket.send_text(
                json.dumps({"error": "Internal server error"})
            )

message_service = MessageService()
```

## WebSocket Manager (app/services/websocket_manager.py)
```python
from typing import List
from fastapi import WebSocket

class ConnectionManager:
    def __init__(self):
        self.active_connections: List[WebSocket] = []

    async def connect(self, websocket: WebSocket):
        await websocket.accept()
        self.active_connections.append(websocket)

    async def disconnect(self, websocket: WebSocket):
        self.active_connections.remove(websocket)

    async def send_personal_message(self, message: str, websocket: WebSocket):
        await websocket.send_text(message)

    async def broadcast(self, message: str):
        for connection in self.active_connections:
            await connection.send_text(message)
```

The backend core provides:

1. FastAPI application setup with lifecycle management
2. WebSocket support for real-time communication
3. Configuration management using Pydantic settings
4. Comprehensive logging
5. Health check endpoint
6. Service layer for business logic
7. WebSocket connection management

Key features:

- Modular design with clear separation of concerns
- Proper error handling and logging
- Configuration management through environment variables
- WebSocket support for real-time features
- Health monitoring endpoint
- Easy integration with various AI services

The code is structured to be:
- Maintainable and scalable
- Easy to test
- Well-documented
- Secure and robust
- Configurable through environment variables
